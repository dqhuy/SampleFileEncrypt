@using PDFManagementApp.Models

@using System.Text.Json
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@inject Microsoft.Extensions.Options.IOptions<AppInfo> AppInfoOptions
@{
    var appInfo = AppInfoOptions.Value;
}
@model PDFManagementApp.Models.Document

@if (ViewBag.Error != null)
{
    <div class="text-red-500 bg-red-100 p-2 rounded mb-4 flex items-center gap-2">
        <i class="fas fa-exclamation-triangle"></i>
        @ViewBag.Error
    </div>
}
<div class="bg-white p-6 rounded-lg shadow-md">
    <h3 class="text-2xl mb-4 text-blue-600 flex items-center gap-2">
        <i class="fas fa-file-pdf"></i>
        File: @Model.FileName
       
       

    </h3>
    <span>Phân loại bảo mật: </span>
    @if (Model.IsEncrypted)
    {
        <span class="text-red-700">Tài liệu mật</span>
    }
    else
    {
        <span class="text-blue-700">Tài liệu thường</span>
    }
    <div class="flex justify-end mb-2">
        <a href="@Url.Action("Index", "Document")"
           class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white text-sm font-semibold rounded shadow transition duration-200">
            <i class="fas fa-arrow-left mr-2"></i> Quay lại danh sách
        </a>
    </div>

   
 


    <!-- Toolbar -->
    <div class="flex items-center gap-2 mb-2">
        <button id="prev-page" class="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Previous Page">&#8592;</button>
        <span>Page <span id="page-num">1</span> / <span id="page-count">1</span></span>
        <button id="next-page" class="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Next Page">&#8594;</button>
    </div>

    <!-- PDF Canvas -->
    <canvas id="pdf-canvas" style="width:100%; border:1px solid #ccc;"></canvas>
</div>

<!-- PDF.js library -->
<script src="~/lib/PdfJS/build/pdf.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var base64 = '@Html.Raw(ViewBag.PdfBase64)';
        function base64ToUint8Array(base64) {
            var raw = atob(base64);
            var uint8Array = new Uint8Array(raw.length);
            for (var i = 0; i < raw.length; i++) {
                uint8Array[i] = raw.charCodeAt(i);
            }
            return uint8Array;
        }
        var pdfData = base64ToUint8Array(base64);

        if (typeof pdfjsLib === 'undefined') {
            alert('PDF.js library failed to load.');
            return;
        }

        pdfjsLib.GlobalWorkerOptions.workerSrc = '/lib/PdfJS/build/pdf.worker.js';

        let pdfDoc = null,
            pageNum = 1,
            pageCount = 1,
            scale = 1.5,
            canvas = document.getElementById('pdf-canvas'),
            ctx = canvas.getContext('2d');

        function renderPage(num) {
          
            pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({ scale: scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                page.render(renderContext);
                document.getElementById('page-num').textContent = num;
                document.getElementById('page-count').textContent = pdfDoc.numPages;
            }).catch(function (error) {
                console.error('Error rendering page:', error);
                CommonJs.SetMessage("Lỗi hiện thị file:"+error, true);
            });
            

        }

        function queueRenderPage(num) {
            if (num < 1 || num > pdfDoc.numPages) return;
            pageNum = num;
            renderPage(pageNum);
        }

        document.getElementById('prev-page').addEventListener('click', function () {
            if (pageNum <= 1) return;
            queueRenderPage(pageNum - 1);
        });

        document.getElementById('next-page').addEventListener('click', function () {
            if (pageNum >= pdfDoc.numPages) return;
            queueRenderPage(pageNum + 1);
        });


        pdfjsLib.getDocument({ data: pdfData }).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            pageCount = pdfDoc.numPages;
            document.getElementById('page-count').textContent = pageCount;
            renderPage(pageNum);
        }).catch(function (error) {
                CommonJs.SetMessage({sucess:false,message:"Lỗi hiện thị file: "+error.message});
                console.error('Error rendering page:', error);
            });
    });
</script>
